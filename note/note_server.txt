dotnet tool install --global dotnet-ef
(dotnet new webapi -o MoviesAPI)
dotnet dev-certs https --trust

app.Use(async (context, next) =>
{
	await context.Response.WriteAsync("pipeline2 ....");
});


dotnet -info
dotnet tool install --global dotnet-ef --version 5.0.3 (dotnet tool update --global dotnet-ef)
dotnet ef -h
dotnet tool list -g

(dotnet ef migrations add AddIdentity -p Infrastructure/ -s Skinet/ -o Data/Migrations)
dotnet ef migrations add Init
dotnet ef database update

dotnet ef migrations add actors

Microsoft.EntityFrameworkCore.SqlServer.NetTopologySuite

dotnet ef migrations add movieTheaters
dotnet ef database update

dotnet ef migrations add MovieAndMore
dotnet ef database update

------------------------------------- Config Identity --------------------------------------

1) public class ApplicationDbContext : DbContext => public class ApplicationDbContext : IdentityDbContext
2) dotnet ef migrations add IdentityTables
3) dotnet ef database update
4) 

services.AddIdentity<IdentityUser, IdentityRole>()
                .AddEntityFrameworkStores<ApplicationDbContext>()
                .AddDefaultTokenProviders();

services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
		.AddJwtBearer(options =>
		{
			options.TokenValidationParameters = new TokenValidationParameters
			{
				ValidateIssuer = false,
				ValidateAudience = false,
				ValidateLifetime = true,
				ValidateIssuerSigningKey = true,
				IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["keyjwt"])),
				ClockSkew = TimeSpan.Zero
			};
		});
		
5) AccountsController ...

6) 
	public class UserCredentials
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
        [Required]
        public string Password { get; set; }
    }
	
	private async Task<AuthenticationResponse> BuildToken(UserCredentials userCredentials)
	{
		var claims = new List<Claim>() { new Claim("email", userCredentials.Email) };
		var user = await userManager.FindByNameAsync(userCredentials.Email);
		var claimsDB = await userManager.GetClaimsAsync(user);
		claims.AddRange(claimsDB);

		var key = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(configuration["keyjwt"]));
		var creds = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);

		var expiration = DateTime.UtcNow.AddYears(1);
		var token = new JwtSecurityToken(issuer: null, audience: null, claims: claims,
			expires: expiration, signingCredentials: creds);

		return new AuthenticationResponse()
		{
			Token = new JwtSecurityTokenHandler().WriteToken(token),
			Expiration = expiration
		};
	}



		
		